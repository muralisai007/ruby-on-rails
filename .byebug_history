continue
params[:leaveslist][:leaves_data]
params[:leaveslist][:employeelist_id]
params
continue
params[:leaveslist][:leaves_data]
params[:leaveslist][:employeelist_id]
params[:leaveslist]
params
c
n
s
exit
end
  )
    deductions: Date::MONTHNAMES.compact.map { |month| { month.downcase.to_sym => [] } }
    extra_leaves: Date::MONTHNAMES.compact.map { |month| { month.downcase.to_sym => [] } },
    default_leaves: Date::MONTHNAMES.compact.map { |month| { month.downcase.to_sym => [] } },
    :employeelist_id,
  params.require(:leaveslist).permit(
def leaveslist_params
s
c
end
  new_employees || [] # Return an empty array if new_employees is nil
  new_employees = new_employees.where("salary >= ?", params[:salary]) if params[:salary].present?
  new_employees = new_employees.where(status: params[:status]) if params[:status].present?
  new_employees = new_employees.where("first_name LIKE ?", "%#{params[:name]}%") if params[:name].present?
    debugger
def filter_new_employees(new_employees)
params
c
 @filtered_employees
c
 @filtered_employees
Employee.where("status = 0 and salary >= 15000").count
 @filtered_employees
c
Employee.where("status = 0 and salary >= 15000").count
@filtered_employees = Employee.where("status=? and salary >=? ", params["status"].to_i, params["salary"])
c
params
c
@filtered_employees
c
@filtered_employees
@filteredemployees
c
Employee.last
params
c
params
n
continue
step
next
exit
e
d
l
c
s
n
l
